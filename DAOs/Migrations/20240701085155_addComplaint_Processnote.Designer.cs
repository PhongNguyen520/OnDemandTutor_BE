// <auto-generated />
using System;
using DAOs;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAOs.Migrations
{
    [DbContext(typeof(DbContext))]
    [Migration("20240701085155_addComplaint_Processnote")]
    partial class addComplaint_Processnote
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BusinessObjects.Account", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateExpireRefreshToken")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("isActive");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Class", b =>
                {
                    b.Property<string>("ClassId")
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("ClassID");

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDay")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DayEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DayStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool?>("IsApprove")
                        .HasColumnType("bit");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<bool?>("Status")
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("bit");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("StudentID");

                    b.Property<string>("SubjectId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("SubjectID");

                    b.Property<string>("TutorId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("TutorID");

                    b.HasKey("ClassId")
                        .HasName("PK__Class__CB1927A0090BF352J");

                    b.HasIndex("StudentId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TutorId");

                    b.ToTable("Class", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.ClassCalender", b =>
                {
                    b.Property<string>("CalenderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClassId")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("DayOfWeek")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("TimeEnd")
                        .HasColumnType("int");

                    b.Property<int>("TimeStart")
                        .HasColumnType("int");

                    b.HasKey("CalenderId")
                        .HasName("PK__ClassCalender__77C70FC2A16C50DB1");

                    b.HasIndex("ClassId");

                    b.ToTable("ClassCalender", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Complaint", b =>
                {
                    b.Property<string>("ComplaintId")
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("ComplaintID");

                    b.Property<string>("ClassId")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Complainter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDay")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Processnote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("StudentID");

                    b.Property<string>("TutorId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("TutorID");

                    b.HasKey("ComplaintId")
                        .HasName("PK__Complain__740D89AFCEF50736D");

                    b.HasIndex("ClassId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TutorId");

                    b.ToTable("Complaint", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Conversation", b =>
                {
                    b.Property<string>("ConversationId")
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("ConversationID");

                    b.Property<DateTime>("CreateDay")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("ConversationId")
                        .HasName("PK__Conversa__C050D897C401235FD");

                    b.ToTable("Conversation", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.ConversationAccount", b =>
                {
                    b.Property<string>("ConversationId")
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("ConversationID");

                    b.Property<string>("AccountId")
                        .HasMaxLength(450)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("AccountID");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("ConversationId", "AccountId")
                        .HasName("PK__Conversa__B31902CF056C16DAD");

                    b.HasIndex("AccountId");

                    b.ToTable("Conversation_Account", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Feedback", b =>
                {
                    b.Property<string>("FeedbackId")
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("FeedbackID");

                    b.Property<string>("ClassId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("ClassID");

                    b.Property<DateTime>("CreateDay")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("StudentID");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TutorId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("TutorID");

                    b.HasKey("FeedbackId")
                        .HasName("PK__Feedback__6A4BEDF65E258262D");

                    b.HasIndex("ClassId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TutorId");

                    b.ToTable("Feedback", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.FindTutorForm", b =>
                {
                    b.Property<string>("FormId")
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("FormID");

                    b.Property<DateTime>("CreateDay")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DayEnd")
                        .HasColumnType("datetime2");

                    b.Property<string>("DayOfWeek")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DayStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescribeTutor")
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool?>("IsActived")
                        .HasColumnType("bit");

                    b.Property<double?>("MaxHourlyRate")
                        .HasColumnType("float");

                    b.Property<double?>("MinHourlyRate")
                        .HasColumnType("float");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("StudentID");

                    b.Property<string>("SubjectId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("SubjectID");

                    b.Property<int>("TimeEnd")
                        .HasColumnType("int");

                    b.Property<int>("TimeStart")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("TutorGender")
                        .HasColumnType("bit");

                    b.Property<string>("TypeOfDegree")
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("FormId")
                        .HasName("PK__FindTuto__FB05B7BD12F4FFB4D");

                    b.HasIndex("StudentId");

                    b.HasIndex("SubjectId");

                    b.ToTable("FindTutorForm", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Grade", b =>
                {
                    b.Property<string>("GradeId")
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("GradeID");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.HasKey("GradeId")
                        .HasName("PK__Grade__54F87A37CC152DE4D");

                    b.ToTable("Grade", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Message", b =>
                {
                    b.Property<string>("MessageId")
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("MessageID");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("AccountID");

                    b.Property<string>("ConversationId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("ConversationID");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.HasKey("MessageId")
                        .HasName("PK__Message__C87C037C2D324FDFD");

                    b.HasIndex("AccountId");

                    b.HasIndex("ConversationId");

                    b.ToTable("Message", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Notification", b =>
                {
                    b.Property<string>("NotificationId")
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("NotificationID");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("AccountID");

                    b.Property<DateTime>("CreateDay")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("NotificationId")
                        .HasName("PK__Notifica__20CF2E32FFBD5FC4D");

                    b.HasIndex("AccountId");

                    b.ToTable("Notification", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.RequestTutorForm", b =>
                {
                    b.Property<string>("FormId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDay")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DayEnd")
                        .HasColumnType("datetime2");

                    b.Property<string>("DayOfWeek")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DayStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("SubjectId")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("TimeEnd")
                        .HasColumnType("int");

                    b.Property<int>("TimeStart")
                        .HasColumnType("int");

                    b.Property<string>("TutorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("FormId")
                        .HasName("PK__RequestTutorForm__77C70FC2A16C50DB2");

                    b.HasIndex("StudentId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TutorId");

                    b.ToTable("RequestTutorForm", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Student", b =>
                {
                    b.Property<string>("StudentId")
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("StudentID");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("AccountID");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<bool>("IsParent")
                        .HasColumnType("bit");

                    b.Property<string>("SchoolName")
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("StudentId")
                        .HasName("PK__Student__32C52A79D012377FD");

                    b.HasIndex("AccountId");

                    b.ToTable("Student", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Subject", b =>
                {
                    b.Property<string>("SubjectId")
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("SubjectID");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GradeId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("GradeID");

                    b.Property<string>("SubjectGroupId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("SubjectGroupID");

                    b.HasKey("SubjectId")
                        .HasName("PK__Subject__AC1BA388537DD7A1D");

                    b.HasIndex("GradeId");

                    b.HasIndex("SubjectGroupId");

                    b.ToTable("Subject", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.SubjectGroup", b =>
                {
                    b.Property<string>("SubjectGroupId")
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("SubjectGroupID");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("SubjectName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("SubjectGroupId")
                        .HasName("PK__SubjectG__2F88B016AD652F27D");

                    b.ToTable("SubjectGroup", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.SubjectTutor", b =>
                {
                    b.Property<string>("SubjectId")
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("SubjectID");

                    b.Property<string>("TutorId")
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("TutorID");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("SubjectId", "TutorId")
                        .HasName("PK__Subject___9B67D374BBB4AFD2D");

                    b.HasIndex("TutorId");

                    b.ToTable("Subject_Tutor", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Transaction", b =>
                {
                    b.Property<string>("TransactionId")
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("TransactionID");

                    b.Property<DateTime>("CreateDay")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<float>("TransactionMoney")
                        .HasColumnType("real");

                    b.Property<string>("WalletId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("WalletID");

                    b.HasKey("TransactionId")
                        .HasName("PK__Transact__55433A4B61451DBED");

                    b.HasIndex("WalletId");

                    b.ToTable("Transaction", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Tutor", b =>
                {
                    b.Property<string>("TutorId")
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("TutorID");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("AccountID");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("CardId")
                        .HasColumnType("int")
                        .HasColumnName("CardID");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("Dob")
                        .HasColumnType("datetime2");

                    b.Property<string>("Education")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Headline")
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(255)");

                    b.Property<float>("HourlyRate")
                        .HasColumnType("real");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Photo")
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("TypeOfDegree")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("TutorId")
                        .HasName("PK__Tutor__77C70FC2A16C50DBD");

                    b.HasIndex("AccountId");

                    b.ToTable("Tutor", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.TutorAd", b =>
                {
                    b.Property<string>("AdsId")
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("AdsID");

                    b.Property<DateTime>("CreateDay")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool?>("IsActived")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TutorId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("TutorID");

                    b.Property<string>("Video")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("AdsId")
                        .HasName("PK__Tutor_Ad__46AAC65A5EF65941D");

                    b.HasIndex("TutorId");

                    b.ToTable("Tutor_Ads", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Wallet", b =>
                {
                    b.Property<string>("WalletId")
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("WalletID");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("AccountID");

                    b.Property<float>("Balance")
                        .HasColumnType("real");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("BankNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDay")
                        .HasColumnType("datetime2");

                    b.HasKey("WalletId")
                        .HasName("PK__Wallet__84D4F92E9F63180BD");

                    b.HasIndex("AccountId");

                    b.ToTable("Wallet", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Class", b =>
                {
                    b.HasOne("BusinessObjects.Student", "Student")
                        .WithMany("Classes")
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("FKClass3011122");

                    b.HasOne("BusinessObjects.Subject", "Subject")
                        .WithMany("Classes")
                        .HasForeignKey("SubjectId")
                        .IsRequired()
                        .HasConstraintName("FKClass1059982");

                    b.HasOne("BusinessObjects.Tutor", "Tutor")
                        .WithMany("Classes")
                        .HasForeignKey("TutorId")
                        .IsRequired()
                        .HasConstraintName("FKClass4794522");

                    b.Navigation("Student");

                    b.Navigation("Subject");

                    b.Navigation("Tutor");
                });

            modelBuilder.Entity("BusinessObjects.ClassCalender", b =>
                {
                    b.HasOne("BusinessObjects.Class", "Classes")
                        .WithMany("ClassCalenders")
                        .HasForeignKey("ClassId")
                        .IsRequired()
                        .HasConstraintName("FKClassCal3875973");

                    b.Navigation("Classes");
                });

            modelBuilder.Entity("BusinessObjects.Complaint", b =>
                {
                    b.HasOne("BusinessObjects.Class", "Class")
                        .WithMany("Complaints")
                        .HasForeignKey("ClassId")
                        .IsRequired()
                        .HasConstraintName("FKComplaint1966098");

                    b.HasOne("BusinessObjects.Student", "Student")
                        .WithMany("Complaints")
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("FKComplaint4160822");

                    b.HasOne("BusinessObjects.Tutor", "Tutor")
                        .WithMany("Complaints")
                        .HasForeignKey("TutorId")
                        .IsRequired()
                        .HasConstraintName("FKComplaint1966472");

                    b.Navigation("Class");

                    b.Navigation("Student");

                    b.Navigation("Tutor");
                });

            modelBuilder.Entity("BusinessObjects.ConversationAccount", b =>
                {
                    b.HasOne("BusinessObjects.Account", "Account")
                        .WithMany("ConversationAccounts")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("FKConversati8185282");

                    b.HasOne("BusinessObjects.Conversation", "Conversation")
                        .WithMany("ConversationAccounts")
                        .HasForeignKey("ConversationId")
                        .IsRequired()
                        .HasConstraintName("FKConversati8723802");

                    b.Navigation("Account");

                    b.Navigation("Conversation");
                });

            modelBuilder.Entity("BusinessObjects.Feedback", b =>
                {
                    b.HasOne("BusinessObjects.Class", "Class")
                        .WithMany("Feedbacks")
                        .HasForeignKey("ClassId")
                        .IsRequired()
                        .HasConstraintName("FKFeedback9125862");

                    b.HasOne("BusinessObjects.Student", "Student")
                        .WithMany("Feedbacks")
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("FKFeedback3488432");

                    b.HasOne("BusinessObjects.Tutor", "Tutor")
                        .WithMany("Feedbacks")
                        .HasForeignKey("TutorId")
                        .IsRequired()
                        .HasConstraintName("FKFeedback4317212");

                    b.Navigation("Class");

                    b.Navigation("Student");

                    b.Navigation("Tutor");
                });

            modelBuilder.Entity("BusinessObjects.FindTutorForm", b =>
                {
                    b.HasOne("BusinessObjects.Student", "Student")
                        .WithMany("FindTutorForms")
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("FKFindTutorF1343742");

                    b.HasOne("BusinessObjects.Subject", "Subject")
                        .WithMany("FindTutorForms")
                        .HasForeignKey("SubjectId")
                        .IsRequired()
                        .HasConstraintName("FKFindTutorF7272632");

                    b.Navigation("Student");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("BusinessObjects.Message", b =>
                {
                    b.HasOne("BusinessObjects.Account", "Account")
                        .WithMany("Messages")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("FKMessage1794542");

                    b.HasOne("BusinessObjects.Conversation", "Conversation")
                        .WithMany("Messages")
                        .HasForeignKey("ConversationId")
                        .IsRequired()
                        .HasConstraintName("FKMessage1256022");

                    b.Navigation("Account");

                    b.Navigation("Conversation");
                });

            modelBuilder.Entity("BusinessObjects.Notification", b =>
                {
                    b.HasOne("BusinessObjects.Account", "Account")
                        .WithMany("Notifications")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("FKNotificati7652242");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("BusinessObjects.RequestTutorForm", b =>
                {
                    b.HasOne("BusinessObjects.Student", "Student")
                        .WithMany("RequestTutorForms")
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("FKRequestTu3875B45");

                    b.HasOne("BusinessObjects.Subject", "Subject")
                        .WithMany("RequestTutorForms")
                        .HasForeignKey("SubjectId")
                        .IsRequired()
                        .HasConstraintName("FKRequestTu3875945");

                    b.HasOne("BusinessObjects.Tutor", "Tutor")
                        .WithMany("RequestTutorForms")
                        .HasForeignKey("TutorId")
                        .IsRequired()
                        .HasConstraintName("FKRequestTu3875974");

                    b.Navigation("Student");

                    b.Navigation("Subject");

                    b.Navigation("Tutor");
                });

            modelBuilder.Entity("BusinessObjects.Student", b =>
                {
                    b.HasOne("BusinessObjects.Account", "Account")
                        .WithMany("Students")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("FKStudent7183142");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("BusinessObjects.Subject", b =>
                {
                    b.HasOne("BusinessObjects.Grade", "Grade")
                        .WithMany("Subjects")
                        .HasForeignKey("GradeId")
                        .IsRequired()
                        .HasConstraintName("FKSubject8669322");

                    b.HasOne("BusinessObjects.SubjectGroup", "SubjectGroup")
                        .WithMany("Subjects")
                        .HasForeignKey("SubjectGroupId")
                        .IsRequired()
                        .HasConstraintName("FKSubject3409472");

                    b.Navigation("Grade");

                    b.Navigation("SubjectGroup");
                });

            modelBuilder.Entity("BusinessObjects.SubjectTutor", b =>
                {
                    b.HasOne("BusinessObjects.Subject", "Subject")
                        .WithMany("SubjectTutors")
                        .HasForeignKey("SubjectId")
                        .IsRequired()
                        .HasConstraintName("FKSubject_Tu6750312");

                    b.HasOne("BusinessObjects.Tutor", "Tutor")
                        .WithMany("SubjectTutors")
                        .HasForeignKey("TutorId")
                        .IsRequired()
                        .HasConstraintName("FKSubject_Tu31882");

                    b.Navigation("Subject");

                    b.Navigation("Tutor");
                });

            modelBuilder.Entity("BusinessObjects.Transaction", b =>
                {
                    b.HasOne("BusinessObjects.Wallet", "Wallet")
                        .WithMany("Transactions")
                        .HasForeignKey("WalletId")
                        .IsRequired()
                        .HasConstraintName("FKTransactio1812602");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("BusinessObjects.Tutor", b =>
                {
                    b.HasOne("BusinessObjects.Account", "Account")
                        .WithMany("Tutors")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("FKTutor3875972");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("BusinessObjects.TutorAd", b =>
                {
                    b.HasOne("BusinessObjects.Tutor", "Tutor")
                        .WithMany("TutorAds")
                        .HasForeignKey("TutorId")
                        .IsRequired()
                        .HasConstraintName("FKTutor_Ads5728872");

                    b.Navigation("Tutor");
                });

            modelBuilder.Entity("BusinessObjects.Wallet", b =>
                {
                    b.HasOne("BusinessObjects.Account", "Account")
                        .WithMany("Wallets")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("FKWallet1156962");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BusinessObjects.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BusinessObjects.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BusinessObjects.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BusinessObjects.Account", b =>
                {
                    b.Navigation("ConversationAccounts");

                    b.Navigation("Messages");

                    b.Navigation("Notifications");

                    b.Navigation("Students");

                    b.Navigation("Tutors");

                    b.Navigation("Wallets");
                });

            modelBuilder.Entity("BusinessObjects.Class", b =>
                {
                    b.Navigation("ClassCalenders");

                    b.Navigation("Complaints");

                    b.Navigation("Feedbacks");
                });

            modelBuilder.Entity("BusinessObjects.Conversation", b =>
                {
                    b.Navigation("ConversationAccounts");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("BusinessObjects.Grade", b =>
                {
                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("BusinessObjects.Student", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("Complaints");

                    b.Navigation("Feedbacks");

                    b.Navigation("FindTutorForms");

                    b.Navigation("RequestTutorForms");
                });

            modelBuilder.Entity("BusinessObjects.Subject", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("FindTutorForms");

                    b.Navigation("RequestTutorForms");

                    b.Navigation("SubjectTutors");
                });

            modelBuilder.Entity("BusinessObjects.SubjectGroup", b =>
                {
                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("BusinessObjects.Tutor", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("Complaints");

                    b.Navigation("Feedbacks");

                    b.Navigation("RequestTutorForms");

                    b.Navigation("SubjectTutors");

                    b.Navigation("TutorAds");
                });

            modelBuilder.Entity("BusinessObjects.Wallet", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
